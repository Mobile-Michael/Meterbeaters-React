{"map":"{\"version\":3,\"sources\":[\"/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/Components/HourButtonHotKeys.js\",\"/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/Components/DatePickerComponent.js\",\"/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/Components/GoogleMap/MBGoogleMap.js\",\"/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/Components/GeoSuggestTextField/GeoSuggestTextField.js\",\"/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/Components/NavBar/MBNavBar.js\",\"/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/App.js\",\"/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/serviceWorker.js\",\"/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/index.js\"],\"names\":[\"HourButtonHotKeys\",\"props\",\"react_default\",\"a\",\"createElement\",\"className\",\"onClick\",\"click\",\"name\",\"DatePickerComponent\",\"onHourHotButtonClicked\",\"hoursToAdd\",\"type\",\"console\",\"log\",\"_this\",\"timeEnd\",\"timeStart\",\"isEndTime\",\"newTimeStr\",\"hh_mm_components\",\"getHHMM_fromString\",\"join\",\"moment\",\"Date\",\"format\",\"timeChanged\",\"sanityCheckTimes\",\"onChangeStart\",\"time\",\"onChangeEnd\",\"TextName\",\"this\",\"entry_default\",\"clearIcon\",\"onChange\",\"value\",\"Components_HourButtonHotKeys\",\"timeString\",\"time_components\",\"split\",\"parseInt\",\"Component\",\"MBGoogleMap\",\"withGoogleMap\",\"react\",\"lib\",\"defaultZoom\",\"zoom\",\"defaultCenter\",\"lat\",\"lng\",\"center\",\"isMarkerShown\",\"position\",\"polylines\",\"map\",\"polyline\",\"index\",\"Polyline\",\"key\",\"path\",\"geodesic\",\"options\",\"strokeColor\",\"strokeOpacity\",\"strokeWeight\",\"LocationTextField\",\"state\",\"onSuggestSelect\",\"Suggest\",\"suggest\",\"onParkClicked\",\"findParking\",\"Geosuggest_esm\",\"placeholder\",\"initialValue\",\"location\",\"google\",\"maps\",\"LatLng\",\"radius\",\"GoogleMap_MBGoogleMap\",\"parkingInfo\",\"containerElement\",\"style\",\"height\",\"mapElement\",\"MBNavBar\",\"DEFAULT_LAT\",\"DEFAULT_LNG\",\"App\",\"startTime\",\"endTime\",\"parkingDataRaw\",\"onTimeChanged\",\"isEnd\",\"setState\",\"onSuggestCallback\",\"_suggest$location\",\"getErrors\",\"postParams\",\"GetParkingURL\",\"axios\",\"post\",\"then\",\"response\",\"data\",\"length\",\"catch\",\"error\",\"StartTime\",\"getHHMM_asString\",\"EndTime\",\"Longitude\",\"Latitude\",\"Distance\",\"startDay\",\"endDay\",\"numDays\",\"email\",\"YMDstring\",\"parkType\",\"Type\",\"_this2\",\"parkingData\",\"dataForSpot\",\"latStart\",\"parseFloat\",\"latEnd\",\"warning\",\"NavBar_MBNavBar\",\"Components_DatePickerComponent\",\"GeoSuggestTextField\",\"Boolean\",\"window\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from \\\"react\\\";\\n\\nconst HourButtonHotKeys = props => {\\n  return (\\n    <div>\\n      <button\\n        className=\\\"btn btn-space btn-secondary btn-sm\\\"\\n        onClick={() => props.click(-1, props.name)}\\n      >\\n        NOW\\n      </button>\\n      <button\\n        className=\\\"btn btn-space btn-secondary btn-sm\\\"\\n        onClick={() => props.click(2, props.name)}\\n      >\\n        Add 2HR\\n      </button>\\n      <button\\n        className=\\\"btn btn-space btn-secondary btn-sm\\\"\\n        onClick={() => props.click(4, props.name)}\\n      >\\n        Add 4HR\\n      </button>\\n      <button\\n        className=\\\"btn btn-space btn-secondary btn-sm\\\"\\n        onClick={() => props.click(6, props.name)}\\n      >\\n        Add 8HR\\n      </button>\\n    </div>\\n  );\\n};\\n\\nexport default HourButtonHotKeys;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport TimePicker from \\\"react-time-picker\\\";\\nimport HourButtonHotKeys from \\\"./HourButtonHotKeys\\\";\\nimport moment from \\\"moment\\\";\\n\\n//DEVTEST should do this in UTC time but for now hard code it at CST\\n\\nclass DatePickerComponent extends Component {\\n  render() {\\n    const TextName = this.sanityCheckTimes() ? \\\"SafeText\\\" : \\\"WarnableText\\\";\\n    return (\\n      <span>\\n        <div>\\n          <h3 className={TextName}>Begin Park Time</h3>\\n          <TimePicker\\n            clearIcon={null}\\n            onChange={this.onChangeStart}\\n            value={this.props.timeStart}\\n          />\\n        </div>\\n        <div>\\n          <HourButtonHotKeys\\n            click={this.onHourHotButtonClicked}\\n            name=\\\"startTime\\\"\\n          />\\n        </div>\\n        <div>\\n          <h3 className={TextName}>End Park Time</h3>\\n          <TimePicker\\n            clearIcon={null}\\n            onChange={this.onChangeEnd}\\n            value={this.props.timeEnd}\\n          />\\n        </div>\\n        <div>\\n          <HourButtonHotKeys\\n            click={this.onHourHotButtonClicked}\\n            name=\\\"endTime\\\"\\n          />\\n        </div>\\n      </span>\\n    );\\n  }\\n\\n  getHHMM_fromString(timeString) {\\n    const time_components = timeString.split(\\\":\\\");\\n    console.log(time_components);\\n    return [parseInt(time_components[0]), time_components[1]];\\n  }\\n\\n  getHHMM_asString(timeString) {\\n    return timeString.split(\\\":\\\").join(\\\"\\\");\\n  }\\n\\n  onHourHotButtonClicked = (hoursToAdd, type) => {\\n    console.log(\\n      \\\"hot button clicked:\\\",\\n      hoursToAdd,\\n      type,\\n      this.props.timeEnd,\\n      this.props.timeStart\\n    );\\n\\n    const isEndTime = type === \\\"endTime\\\";\\n\\n    let newTimeStr = \\\"\\\";\\n    if (hoursToAdd > 0 && (this.props.timeStart && this.props.timeEnd)) {\\n      let hh_mm_components = isEndTime\\n        ? this.getHHMM_fromString(this.props.timeEnd)\\n        : this.getHHMM_fromString(this.props.timeStart);\\n\\n      hh_mm_components[0] += hoursToAdd;\\n      newTimeStr =\\n        hh_mm_components[0] >= 24 ? \\\"23:59\\\" : hh_mm_components.join(\\\":\\\");\\n    } else {\\n      //aka time  now!\\n      newTimeStr = moment(new Date()).format(\\\"HH:mm\\\");\\n    }\\n\\n    this.props.timeChanged(isEndTime, newTimeStr);\\n  };\\n\\n  sanityCheckTimes = () => {\\n    console.log(\\\"In SanityCHeck\\\", this.props.timeStart, this.props.timeEnd);\\n    return this.props.timeStart <= this.props.timeEnd;\\n  };\\n\\n  onChangeStart = time => {\\n    this.props.timeChanged(false, time);\\n  };\\n\\n  onChangeEnd = time => {\\n    this.props.timeChanged(true, time);\\n  };\\n}\\n\\nexport default DatePickerComponent;\\n\",\"import * as React from \\\"react\\\";\\nimport { GoogleMap, Marker, withGoogleMap } from \\\"react-google-maps\\\";\\nimport { Polyline } from \\\"react-google-maps/lib/components/Polyline\\\";\\n\\nconst MBGoogleMap = withGoogleMap(props => (\\n  <GoogleMap\\n    defaultZoom={8}\\n    zoom={props.zoom}\\n    defaultCenter={{ lat: props.lat, lng: props.lng }}\\n    center={{ lat: props.lat, lng: props.lng }}\\n  >\\n    {props.isMarkerShown && (\\n      <Marker position={{ lat: props.lat, lng: props.lng }} />\\n    )}\\n    {props.polylines.map((polyline, index) => (\\n      <Polyline\\n        key={index}\\n        path={polyline}\\n        geodesic={true}\\n        options={{\\n          strokeColor: \\\"#008b45\\\",\\n          strokeOpacity: 0.75,\\n          strokeWeight: 3\\n        }}\\n      />\\n    ))}\\n  </GoogleMap>\\n));\\n\\nexport default MBGoogleMap;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport Geosuggest from \\\"react-geosuggest\\\";\\nimport \\\"./geosuggest.css\\\";\\n\\n/*global google*/\\n\\nimport MBGoogleMap from \\\"../GoogleMap/MBGoogleMap.js\\\";\\n\\nclass LocationTextField extends Component {\\n  state = {};\\n\\n  componentDidMount() {\\n    console.log(\\\"Location  and Map Mounted\\\");\\n  }\\n\\n  onSuggestSelect = Suggest => {\\n    this.props.suggest(Suggest);\\n  };\\n\\n  onParkClicked = () => {\\n    this.props.findParking();\\n  };\\n\\n  render() {\\n    return (\\n      <div>\\n        <hr />\\n        <h4>Where Do You Want To Park?</h4>\\n        <Geosuggest\\n          placeholder=\\\"Where do you want to park?\\\"\\n          initialValue=\\\"Willis Tower\\\"\\n          onSuggestSelect={this.onSuggestSelect}\\n          location={new google.maps.LatLng(41.8789, 87.6359)}\\n          radius={20}\\n        />\\n        <MBGoogleMap\\n          lat={this.props.lat}\\n          lng={this.props.lng}\\n          zoom={16}\\n          polylines={this.props.parkingInfo}\\n          isMarkerShown={true}\\n          containerElement={<div style={{ height: `400px` }} />}\\n          mapElement={<div style={{ height: `100%` }} />}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default LocationTextField;\\n\",\"import React from \\\"react\\\";\\n\\n//lets just use this as a nonstate based bar\\nconst MBNavBar = () => {\\n  return (\\n    <nav className=\\\"navbar navbar-dark bg-dark\\\">\\n      <span className=\\\"navbar-text\\\">Meter Beaters React Demo</span>\\n    </nav>\\n  );\\n};\\n\\nexport default MBNavBar;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport \\\"./App.css\\\";\\nimport DatePickerComponent from \\\"./Components/DatePickerComponent\\\";\\nimport GeoSuggestTextField from \\\"./Components/GeoSuggestTextField/GeoSuggestTextField.js\\\";\\nimport MBNavBar from \\\"./Components/NavBar/MBNavBar\\\";\\nimport axios from \\\"axios\\\";\\n\\nconst DEFAULT_LAT = 41.8789;\\nconst DEFAULT_LNG = -87.6359;\\n\\nclass App extends Component {\\n  state = {\\n    lat: DEFAULT_LAT,\\n    lng: DEFAULT_LNG,\\n    startTime: \\\"11:00\\\",\\n    endTime: \\\"12:00\\\",\\n    parkingDataRaw: []\\n  };\\n\\n  getErrors() {\\n    if (this.state.startTime > this.state.endTime)\\n      return \\\"Start Time Is After End Time!\\\";\\n    else if (!this.state.lat || !this.state.lng)\\n      return \\\"Parking Location Is Not Set!\\\";\\n    else return false;\\n  }\\n\\n  onTimeChanged = (isEnd, time) => {\\n    console.log(\\\"linked time component\\\", isEnd, time);\\n    if (isEnd) this.setState({ endTime: time });\\n    else this.setState({ startTime: time });\\n  };\\n\\n  onSuggestCallback = suggest => {\\n    if (suggest) {\\n      const { lat, lng } = suggest.location;\\n      console.log(lat, lng);\\n      this.setState({ lat: lat, lng: lng });\\n    } else {\\n      this.setState({ lat: DEFAULT_LAT, lng: DEFAULT_LNG });\\n    }\\n\\n    this.findParking();\\n  };\\n\\n  findParking = () => {\\n    if (this.getErrors()) {\\n      console.log(\\\"Errors in inputs not continuing!\\\");\\n      return;\\n    }\\n\\n    console.log(this.state.lat);\\n    const postParams = this.GetParkingURL();\\n    console.log(postParams);\\n    axios\\n      .post(\\\"http://66.175.210.85/MB_Deprecated_test/newTest.php\\\", postParams)\\n      .then(response => {\\n        console.log(\\\"Data received\\\");\\n        console.log(response.data.length);\\n        if (response.data.length)\\n          this.setState({ parkingDataRaw: response.data });\\n        else this.setState({ parkingDataRaw: [] });\\n      })\\n      .catch(error => {\\n        console.log(\\\"Error:get parking: \\\", error);\\n      });\\n  };\\n\\n  getHHMM_asString(timeString) {\\n    return timeString.split(\\\":\\\").join(\\\"\\\");\\n  }\\n\\n  GetParkingURL = () => {\\n    const postParams = {\\n      StartTime: this.getHHMM_asString(this.state.startTime),\\n      EndTime: this.getHHMM_asString(this.state.endTime),\\n      Longitude: this.state.lng,\\n      Latitude: this.state.lat,\\n      Distance: 0.00434783,\\n      startDay: 7,\\n      endDay: 7,\\n      numDays: 0,\\n      email: \\\"reacttest@react.com\\\",\\n      YMDstring: \\\"2018-12-22\\\",\\n      parkType: 0,\\n      Type: 1\\n    };\\n\\n    return postParams;\\n  };\\n  //\\n  componentDidMount() {\\n    console.log(\\\"mounted called\\\");\\n    this.findParking();\\n  }\\n\\n  render() {\\n    let parkingData = [];\\n    if (this.state.parkingDataRaw && this.state.parkingDataRaw.length) {\\n      parkingData = this.state.parkingDataRaw.map((dataForSpot, index) => {\\n        //const id = dataForSpot[\\\"ID\\\"];\\n        const latStart = parseFloat(dataForSpot[\\\"BeginLat\\\"]);\\n        const latEnd = parseFloat(dataForSpot[\\\"EndLat\\\"]);\\n        const longStart = parseFloat(dataForSpot[\\\"BeginLong\\\"]);\\n        const longEnd = parseFloat(dataForSpot[\\\"EndLong\\\"]);\\n        const insert = [\\n          { lat: latStart, lng: longStart },\\n          { lat: latEnd, lng: longEnd }\\n        ];\\n        return insert;\\n      });\\n    }\\n\\n    let warning = this.getErrors();\\n\\n    return (\\n      <div className=\\\"App\\\">\\n        <MBNavBar />\\n        <DatePickerComponent\\n          timeChanged={(isEnd, time) => this.onTimeChanged(isEnd, time)}\\n          timeStart={this.state.startTime}\\n          timeEnd={this.state.endTime}\\n        />\\n        <button\\n          className=\\\"btn btn-primary btn-md m-2\\\"\\n          onClick={this.findParking}\\n        >\\n          Find Parking!\\n        </button>\\n\\n        <h3 className=\\\"WarnableText\\\">{warning}</h3>\\n\\n        <GeoSuggestTextField\\n          suggest={suggest => this.onSuggestCallback(suggest)}\\n          lat={this.state.lat}\\n          lng={this.state.lng}\\n          parkingInfo={parkingData}\\n        />\\n\\n        {parkingData.length > 0 ? (\\n          <h1>{parkingData.length} unique spots available</h1>\\n        ) : (\\n          <h1>No parking data available</h1>\\n        )}\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport \\\"./index.css\\\";\\nimport App from \\\"./App\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";\\nimport \\\"../node_modules/bootstrap/dist/css/bootstrap.css\\\";\\n\\nReactDOM.render(<App />, document.getElementById(\\\"root\\\"));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{163:function(e,t,n){e.exports=n(413)},168:function(e,t,n){},170:function(e,t,n){},196:function(e,t,n){},413:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(64),i=n.n(o),l=(n(168),n(33)),c=n(34),s=n(36),u=n(35),m=n(37),p=(n(170),n(94)),g=n.n(p),d=function(e){return r.a.createElement(\"div\",null,r.a.createElement(\"button\",{className:\"btn btn-space btn-secondary btn-sm\",onClick:function(){return e.click(-1,e.name)}},\"NOW\"),r.a.createElement(\"button\",{className:\"btn btn-space btn-secondary btn-sm\",onClick:function(){return e.click(2,e.name)}},\"Add 2HR\"),r.a.createElement(\"button\",{className:\"btn btn-space btn-secondary btn-sm\",onClick:function(){return e.click(4,e.name)}},\"Add 4HR\"),r.a.createElement(\"button\",{className:\"btn btn-space btn-secondary btn-sm\",onClick:function(){return e.click(6,e.name)}},\"Add 8HR\"))},k=n(158),f=n.n(k),h=function(e){function t(){var e,n;Object(l.a)(this,t);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(n=Object(s.a)(this,(e=Object(u.a)(t)).call.apply(e,[this].concat(r)))).onHourHotButtonClicked=function(e,t){console.log(\"hot button clicked:\",e,t,n.props.timeEnd,n.props.timeStart);var a=\"endTime\"===t,r=\"\";if(e>0&&n.props.timeStart&&n.props.timeEnd){var o=a?n.getHHMM_fromString(n.props.timeEnd):n.getHHMM_fromString(n.props.timeStart);o[0]+=e,r=o[0]>=24?\"23:59\":o.join(\":\")}else r=f()(new Date).format(\"HH:mm\");n.props.timeChanged(a,r)},n.sanityCheckTimes=function(){return console.log(\"In SanityCHeck\",n.props.timeStart,n.props.timeEnd),n.props.timeStart<=n.props.timeEnd},n.onChangeStart=function(e){n.props.timeChanged(!1,e)},n.onChangeEnd=function(e){n.props.timeChanged(!0,e)},n}return Object(m.a)(t,e),Object(c.a)(t,[{key:\"render\",value:function(){var e=this.sanityCheckTimes()?\"SafeText\":\"WarnableText\";return r.a.createElement(\"span\",null,r.a.createElement(\"div\",null,r.a.createElement(\"h3\",{className:e},\"Begin Park Time\"),r.a.createElement(g.a,{clearIcon:null,onChange:this.onChangeStart,value:this.props.timeStart})),r.a.createElement(\"div\",null,r.a.createElement(d,{click:this.onHourHotButtonClicked,name:\"startTime\"})),r.a.createElement(\"div\",null,r.a.createElement(\"h3\",{className:e},\"End Park Time\"),r.a.createElement(g.a,{clearIcon:null,onChange:this.onChangeEnd,value:this.props.timeEnd})),r.a.createElement(\"div\",null,r.a.createElement(d,{click:this.onHourHotButtonClicked,name:\"endTime\"})))}},{key:\"getHHMM_fromString\",value:function(e){var t=e.split(\":\");return console.log(t),[parseInt(t[0]),t[1]]}},{key:\"getHHMM_asString\",value:function(e){return e.split(\":\").join(\"\")}}]),t}(a.Component),E=n(159),b=(n(196),n(65)),v=n(93),y=Object(b.withGoogleMap)(function(e){return a.createElement(b.GoogleMap,{defaultZoom:8,zoom:e.zoom,defaultCenter:{lat:e.lat,lng:e.lng},center:{lat:e.lat,lng:e.lng}},e.isMarkerShown&&a.createElement(b.Marker,{position:{lat:e.lat,lng:e.lng}}),e.polylines.map(function(e,t){return a.createElement(v.Polyline,{key:t,path:e,geodesic:!0,options:{strokeColor:\"#008b45\",strokeOpacity:.75,strokeWeight:3}})}))}),S=function(e){function t(){var e,n;Object(l.a)(this,t);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(n=Object(s.a)(this,(e=Object(u.a)(t)).call.apply(e,[this].concat(r)))).state={},n.onSuggestSelect=function(e){n.props.suggest(e)},n.onParkClicked=function(){n.props.findParking()},n}return Object(m.a)(t,e),Object(c.a)(t,[{key:\"componentDidMount\",value:function(){console.log(\"Location  and Map Mounted\")}},{key:\"render\",value:function(){return r.a.createElement(\"div\",null,r.a.createElement(\"hr\",null),r.a.createElement(\"h4\",null,\"Where Do You Want To Park?\"),r.a.createElement(E.a,{placeholder:\"Where do you want to park?\",initialValue:\"Willis Tower\",onSuggestSelect:this.onSuggestSelect,location:new google.maps.LatLng(41.8789,87.6359),radius:20}),r.a.createElement(y,{lat:this.props.lat,lng:this.props.lng,zoom:16,polylines:this.props.parkingInfo,isMarkerShown:!0,containerElement:r.a.createElement(\"div\",{style:{height:\"400px\"}}),mapElement:r.a.createElement(\"div\",{style:{height:\"100%\"}})}))}}]),t}(a.Component),C=function(){return r.a.createElement(\"nav\",{className:\"navbar navbar-dark bg-dark\"},r.a.createElement(\"span\",{className:\"navbar-text\"},\"Meter Beaters React Demo\"))},w=n(162),H=n.n(w),M=41.8789,T=-87.6359,j=function(e){function t(){var e,n;Object(l.a)(this,t);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(n=Object(s.a)(this,(e=Object(u.a)(t)).call.apply(e,[this].concat(r)))).state={lat:M,lng:T,startTime:\"11:00\",endTime:\"12:00\",parkingDataRaw:[]},n.onTimeChanged=function(e,t){console.log(\"linked time component\",e,t),e?n.setState({endTime:t}):n.setState({startTime:t})},n.onSuggestCallback=function(e){if(e){var t=e.location,a=t.lat,r=t.lng;console.log(a,r),n.setState({lat:a,lng:r})}else n.setState({lat:M,lng:T});n.findParking()},n.findParking=function(){if(n.getErrors())console.log(\"Errors in inputs not continuing!\");else{console.log(n.state.lat);var e=n.GetParkingURL();console.log(e),H.a.post(\"http://66.175.210.85/MB_Deprecated_test/newTest.php\",e).then(function(e){console.log(\"Data received\"),console.log(e.data.length),e.data.length?n.setState({parkingDataRaw:e.data}):n.setState({parkingDataRaw:[]})}).catch(function(e){console.log(\"Error:get parking: \",e)})}},n.GetParkingURL=function(){return{StartTime:n.getHHMM_asString(n.state.startTime),EndTime:n.getHHMM_asString(n.state.endTime),Longitude:n.state.lng,Latitude:n.state.lat,Distance:.00434783,startDay:7,endDay:7,numDays:0,email:\"reacttest@react.com\",YMDstring:\"2018-12-22\",parkType:0,Type:1}},n}return Object(m.a)(t,e),Object(c.a)(t,[{key:\"getErrors\",value:function(){return this.state.startTime>this.state.endTime?\"Start Time Is After End Time!\":(!this.state.lat||!this.state.lng)&&\"Parking Location Is Not Set!\"}},{key:\"getHHMM_asString\",value:function(e){return e.split(\":\").join(\"\")}},{key:\"componentDidMount\",value:function(){console.log(\"mounted called\"),this.findParking()}},{key:\"render\",value:function(){var e=this,t=[];this.state.parkingDataRaw&&this.state.parkingDataRaw.length&&(t=this.state.parkingDataRaw.map(function(e,t){var n=parseFloat(e.BeginLat),a=parseFloat(e.EndLat);return[{lat:n,lng:parseFloat(e.BeginLong)},{lat:a,lng:parseFloat(e.EndLong)}]}));var n=this.getErrors();return r.a.createElement(\"div\",{className:\"App\"},r.a.createElement(C,null),r.a.createElement(h,{timeChanged:function(t,n){return e.onTimeChanged(t,n)},timeStart:this.state.startTime,timeEnd:this.state.endTime}),r.a.createElement(\"button\",{className:\"btn btn-primary btn-md m-2\",onClick:this.findParking},\"Find Parking!\"),r.a.createElement(\"h3\",{className:\"WarnableText\"},n),r.a.createElement(S,{suggest:function(t){return e.onSuggestCallback(t)},lat:this.state.lat,lng:this.state.lng,parkingInfo:t}),t.length>0?r.a.createElement(\"h1\",null,t.length,\" unique spots available\"):r.a.createElement(\"h1\",null,\"No parking data available\"))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));n(411);i.a.render(r.a.createElement(j,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[163,2,1]]]);","extractedComments":[]}