{"ast":null,"code":"var _jsxFileName = \"/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/Components/GoogleMap/MBGoogleMap.js\";\nimport * as React from \"react\";\nimport { GoogleMap, Marker, withGoogleMap } from \"react-google-maps\";\nimport Polyline from \"react-google-maps/lib/components/Polyline\";\nimport logo from \"./MBLogo.png\";\n/*global google*/\n\nvar MBGoogleMap = withGoogleMap(function (props) {\n  var onMarkerClicked = function onMarkerClicked() {};\n\n  return React.createElement(GoogleMap, {\n    defaultZoom: 8,\n    zoom: props.zoom,\n    defaultCenter: {\n      lat: props.lat,\n      lng: props.lng\n    },\n    center: {\n      lat: props.lat,\n      lng: props.lng\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, props.polylines.map(function (polyline, index) {\n    return React.createElement(Polyline, {\n      key: index,\n      path: polyline //geodesic={true}\n      ,\n      options: {\n        strokeColor: \"#008b45\",\n        strokeOpacity: 0.75,\n        strokeWeight: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    });\n  }), props.leadsGeoMarkers.map(function (geoMarkInfo, index) {\n    return React.createElement(Marker, {\n      key: geoMarkInfo.lead_id,\n      icon: {\n        url: logo,\n        scaledSize: new google.maps.Size(32, 32)\n      },\n      position: {\n        lat: geoMarkInfo.lat,\n        lng: geoMarkInfo.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n  }));\n});\nexport default MBGoogleMap;","map":{"version":3,"sources":["/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/Components/GoogleMap/MBGoogleMap.js"],"names":["React","GoogleMap","Marker","withGoogleMap","Polyline","logo","MBGoogleMap","props","onMarkerClicked","zoom","lat","lng","polylines","map","polyline","index","strokeColor","strokeOpacity","strokeWeight","leadsGeoMarkers","geoMarkInfo","lead_id","url","scaledSize","google","maps","Size"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,aAA5B,QAAiD,mBAAjD;AAEA,OAAOC,QAAP,MAAqB,2CAArB;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AAEA;;AAEA,IAAMC,WAAW,GAAGH,aAAa,CAAC,UAAAI,KAAK,EAAI;AACzC,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM,CAAE,CAAhC;;AAEA,SACE,oBAAC,SAAD;AACE,IAAA,WAAW,EAAE,CADf;AAEE,IAAA,IAAI,EAAED,KAAK,CAACE,IAFd;AAGE,IAAA,aAAa,EAAE;AAAEC,MAAAA,GAAG,EAAEH,KAAK,CAACG,GAAb;AAAkBC,MAAAA,GAAG,EAAEJ,KAAK,CAACI;AAA7B,KAHjB;AAIE,IAAA,MAAM,EAAE;AAAED,MAAAA,GAAG,EAAEH,KAAK,CAACG,GAAb;AAAkBC,MAAAA,GAAG,EAAEJ,KAAK,CAACI;AAA7B,KAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGJ,KAAK,CAACK,SAAN,CAAgBC,GAAhB,CAAoB,UAACC,QAAD,EAAWC,KAAX;AAAA,WACnB,oBAAC,QAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,IAAI,EAAED,QAFR,CAGE;AAHF;AAIE,MAAA,OAAO,EAAE;AACPE,QAAAA,WAAW,EAAE,SADN;AAEPC,QAAAA,aAAa,EAAE,IAFR;AAGPC,QAAAA,YAAY,EAAE;AAHP,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADmB;AAAA,GAApB,CANH,EAmBGX,KAAK,CAACY,eAAN,CAAsBN,GAAtB,CAA0B,UAACO,WAAD,EAAcL,KAAd;AAAA,WACzB,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEK,WAAW,CAACC,OADnB;AAEE,MAAA,IAAI,EAAE;AAAEC,QAAAA,GAAG,EAAEjB,IAAP;AAAakB,QAAAA,UAAU,EAAE,IAAIC,MAAM,CAACC,IAAP,CAAYC,IAAhB,CAAqB,EAArB,EAAyB,EAAzB;AAAzB,OAFR;AAGE,MAAA,QAAQ,EAAE;AAAEhB,QAAAA,GAAG,EAAEU,WAAW,CAACV,GAAnB;AAAwBC,QAAAA,GAAG,EAAES,WAAW,CAACT;AAAzC,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADyB;AAAA,GAA1B,CAnBH,CADF;AA6BD,CAhCgC,CAAjC;AAkCA,eAAeL,WAAf","sourcesContent":["import * as React from \"react\";\nimport { GoogleMap, Marker, withGoogleMap } from \"react-google-maps\";\n\nimport Polyline from \"react-google-maps/lib/components/Polyline\";\n\nimport logo from \"./MBLogo.png\";\n\n/*global google*/\n\nconst MBGoogleMap = withGoogleMap(props => {\n  const onMarkerClicked = () => {};\n\n  return (\n    <GoogleMap\n      defaultZoom={8}\n      zoom={props.zoom}\n      defaultCenter={{ lat: props.lat, lng: props.lng }}\n      center={{ lat: props.lat, lng: props.lng }}\n    >\n      {props.polylines.map((polyline, index) => (\n        <Polyline\n          key={index}\n          path={polyline}\n          //geodesic={true}\n          options={{\n            strokeColor: \"#008b45\",\n            strokeOpacity: 0.75,\n            strokeWeight: 3\n          }}\n        />\n      ))}\n\n      {props.leadsGeoMarkers.map((geoMarkInfo, index) => (\n        <Marker\n          key={geoMarkInfo.lead_id}\n          icon={{ url: logo, scaledSize: new google.maps.Size(32, 32) }}\n          position={{ lat: geoMarkInfo.lat, lng: geoMarkInfo.lng }}\n        />\n      ))}\n    </GoogleMap>\n  );\n});\n\nexport default MBGoogleMap;\n"]},"metadata":{},"sourceType":"module"}