{"ast":null,"code":"var _jsxFileName = \"/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/Components/GoogleMap/MBGoogleMap.js\";\nimport * as React from \"react\";\nimport { GoogleMap, Marker, withGoogleMap } from \"react-google-maps\";\nimport Polyline from \"react-google-maps/lib/components/Polyline\";\nimport logo from \"./MBLogo.png\";\n/*global google*/\n\nvar MBGoogleMap = withGoogleMap(function (props) {\n  var markers = null;\n  console.log(\"leadInfo: \", props.selectedLead);\n\n  if (props.selectedLead) {\n    props.leadsGeoMarkers.map(function (geoMarkInfo, index) {\n      if (props.selectedLead) {\n        markers = props.leadsGeoMarkers.map(function (geoMarkInfo, index) {\n          if (props.selectedLead.lead_id === geoMarkInfo.lead_info) {\n            return React.createElement(Marker, {\n              key: geoMarkInfo.lead_id,\n              onClick: function onClick() {\n                props.onLeadClick(geoMarkInfo);\n              } //icon={{ url: logo, scaledSize: new google.maps.Size(32, 32) }}\n              ,\n              position: {\n                lat: geoMarkInfo.lat,\n                lng: geoMarkInfo.lng\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 19\n              },\n              __self: this\n            });\n          } else {}\n        });\n      }\n    });\n  }\n\n  return React.createElement(GoogleMap, {\n    defaultZoom: 8,\n    zoom: props.zoom,\n    defaultCenter: {\n      lat: props.lat,\n      lng: props.lng\n    },\n    center: {\n      lat: props.lat,\n      lng: props.lng\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, props.polylines.map(function (polyline, index) {\n    return React.createElement(Polyline, {\n      key: index,\n      path: polyline //geodesic={true}\n      ,\n      options: {\n        strokeColor: \"#008b45\",\n        strokeOpacity: 0.75,\n        strokeWeight: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }), props.leadsGeoMarkers.map(function (geoMarkInfo, index) {\n    return React.createElement(Marker, {\n      key: geoMarkInfo.lead_id,\n      onClick: function onClick() {\n        props.onLeadClick(geoMarkInfo);\n      } //icon={{ url: logo, scaledSize: new google.maps.Size(32, 32) }}\n      ,\n      position: {\n        lat: geoMarkInfo.lat,\n        lng: geoMarkInfo.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    });\n  }));\n});\nexport default MBGoogleMap;","map":{"version":3,"sources":["/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/Components/GoogleMap/MBGoogleMap.js"],"names":["React","GoogleMap","Marker","withGoogleMap","Polyline","logo","MBGoogleMap","props","markers","console","log","selectedLead","leadsGeoMarkers","map","geoMarkInfo","index","lead_id","lead_info","onLeadClick","lat","lng","zoom","polylines","polyline","strokeColor","strokeOpacity","strokeWeight"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,aAA5B,QAAiD,mBAAjD;AAEA,OAAOC,QAAP,MAAqB,2CAArB;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AAEA;;AAEA,IAAMC,WAAW,GAAGH,aAAa,CAAC,UAAAI,KAAK,EAAI;AACzC,MAAIC,OAAO,GAAG,IAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,KAAK,CAACI,YAAhC;;AACA,MAAIJ,KAAK,CAACI,YAAV,EAAwB;AACtBJ,IAAAA,KAAK,CAACK,eAAN,CAAsBC,GAAtB,CAA0B,UAACC,WAAD,EAAcC,KAAd,EAAwB;AAChD,UAAIR,KAAK,CAACI,YAAV,EAAwB;AACtBH,QAAAA,OAAO,GAAGD,KAAK,CAACK,eAAN,CAAsBC,GAAtB,CAA0B,UAACC,WAAD,EAAcC,KAAd,EAAwB;AAC1D,cAAIR,KAAK,CAACI,YAAN,CAAmBK,OAAnB,KAA+BF,WAAW,CAACG,SAA/C,EAA0D;AACxD,mBACE,oBAAC,MAAD;AACE,cAAA,GAAG,EAAEH,WAAW,CAACE,OADnB;AAEE,cAAA,OAAO,EAAE,mBAAM;AACbT,gBAAAA,KAAK,CAACW,WAAN,CAAkBJ,WAAlB;AACD,eAJH,CAKE;AALF;AAME,cAAA,QAAQ,EAAE;AAAEK,gBAAAA,GAAG,EAAEL,WAAW,CAACK,GAAnB;AAAwBC,gBAAAA,GAAG,EAAEN,WAAW,CAACM;AAAzC,eANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAUD,WAXD,MAWO,CACN;AACF,SAdS,CAAV;AAeD;AACF,KAlBD;AAmBD;;AAED,SACE,oBAAC,SAAD;AACE,IAAA,WAAW,EAAE,CADf;AAEE,IAAA,IAAI,EAAEb,KAAK,CAACc,IAFd;AAGE,IAAA,aAAa,EAAE;AAAEF,MAAAA,GAAG,EAAEZ,KAAK,CAACY,GAAb;AAAkBC,MAAAA,GAAG,EAAEb,KAAK,CAACa;AAA7B,KAHjB;AAIE,IAAA,MAAM,EAAE;AAAED,MAAAA,GAAG,EAAEZ,KAAK,CAACY,GAAb;AAAkBC,MAAAA,GAAG,EAAEb,KAAK,CAACa;AAA7B,KAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGb,KAAK,CAACe,SAAN,CAAgBT,GAAhB,CAAoB,UAACU,QAAD,EAAWR,KAAX;AAAA,WACnB,oBAAC,QAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,IAAI,EAAEQ,QAFR,CAGE;AAHF;AAIE,MAAA,OAAO,EAAE;AACPC,QAAAA,WAAW,EAAE,SADN;AAEPC,QAAAA,aAAa,EAAE,IAFR;AAGPC,QAAAA,YAAY,EAAE;AAHP,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADmB;AAAA,GAApB,CANH,EAmBGnB,KAAK,CAACK,eAAN,CAAsBC,GAAtB,CAA0B,UAACC,WAAD,EAAcC,KAAd;AAAA,WACzB,oBAAC,MAAD;AACE,MAAA,GAAG,EAAED,WAAW,CAACE,OADnB;AAEE,MAAA,OAAO,EAAE,mBAAM;AACbT,QAAAA,KAAK,CAACW,WAAN,CAAkBJ,WAAlB;AACD,OAJH,CAKE;AALF;AAME,MAAA,QAAQ,EAAE;AAAEK,QAAAA,GAAG,EAAEL,WAAW,CAACK,GAAnB;AAAwBC,QAAAA,GAAG,EAAEN,WAAW,CAACM;AAAzC,OANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADyB;AAAA,GAA1B,CAnBH,CADF;AAgCD,CAzDgC,CAAjC;AA2DA,eAAed,WAAf","sourcesContent":["import * as React from \"react\";\nimport { GoogleMap, Marker, withGoogleMap } from \"react-google-maps\";\n\nimport Polyline from \"react-google-maps/lib/components/Polyline\";\n\nimport logo from \"./MBLogo.png\";\n\n/*global google*/\n\nconst MBGoogleMap = withGoogleMap(props => {\n  let markers = null;\n  console.log(\"leadInfo: \", props.selectedLead);\n  if (props.selectedLead) {\n    props.leadsGeoMarkers.map((geoMarkInfo, index) => {\n      if (props.selectedLead) {\n        markers = props.leadsGeoMarkers.map((geoMarkInfo, index) => {\n          if (props.selectedLead.lead_id === geoMarkInfo.lead_info) {\n            return (\n              <Marker\n                key={geoMarkInfo.lead_id}\n                onClick={() => {\n                  props.onLeadClick(geoMarkInfo);\n                }}\n                //icon={{ url: logo, scaledSize: new google.maps.Size(32, 32) }}\n                position={{ lat: geoMarkInfo.lat, lng: geoMarkInfo.lng }}\n              />\n            );\n          } else {\n          }\n        });\n      }\n    });\n  }\n\n  return (\n    <GoogleMap\n      defaultZoom={8}\n      zoom={props.zoom}\n      defaultCenter={{ lat: props.lat, lng: props.lng }}\n      center={{ lat: props.lat, lng: props.lng }}\n    >\n      {props.polylines.map((polyline, index) => (\n        <Polyline\n          key={index}\n          path={polyline}\n          //geodesic={true}\n          options={{\n            strokeColor: \"#008b45\",\n            strokeOpacity: 0.75,\n            strokeWeight: 3\n          }}\n        />\n      ))}\n\n      {props.leadsGeoMarkers.map((geoMarkInfo, index) => (\n        <Marker\n          key={geoMarkInfo.lead_id}\n          onClick={() => {\n            props.onLeadClick(geoMarkInfo);\n          }}\n          //icon={{ url: logo, scaledSize: new google.maps.Size(32, 32) }}\n          position={{ lat: geoMarkInfo.lat, lng: geoMarkInfo.lng }}\n        />\n      ))}\n    </GoogleMap>\n  );\n});\n\nexport default MBGoogleMap;\n"]},"metadata":{},"sourceType":"module"}