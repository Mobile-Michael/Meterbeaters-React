{"ast":null,"code":"var _jsxFileName = \"/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/Components/GoogleMap/MBGoogleMap.js\";\nimport * as React from \"react\";\nimport { withScriptjs, GoogleMap, Marker, withGoogleMap } from \"react-google-maps\";\nimport Polyline from \"react-google-maps/lib/components/Polyline\";\nimport logo from \"./MBLogo.png\";\n/*global google*/\n\nvar icon = {\n  url: logo,\n  scaledSize: new google.maps.Size(32, 32)\n};\nvar MBGoogleMap = withScriptjs(withGoogleMap(function (props) {\n  return React.createElement(GoogleMap, {\n    defaultZoom: 8,\n    zoom: props.zoom,\n    defaultCenter: {\n      lat: props.lat,\n      lng: props.lng\n    },\n    center: {\n      lat: props.lat,\n      lng: props.lng\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, props.polylines.map(function (polyline, index) {\n    return React.createElement(Polyline, {\n      key: index,\n      path: polyline //geodesic={true}\n      ,\n      options: {\n        strokeColor: \"#008b45\",\n        strokeOpacity: 0.75,\n        strokeWeight: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    });\n  }), props.leadsGeoMarkers.map(function (geoMarkInfo, index) {\n    return React.createElement(Marker, {\n      key: geoMarkInfo.task_id,\n      onClick: geoMarkInfo.on,\n      position: {\n        lat: geoMarkInfo.lat,\n        lng: geoMarkInfo.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  }));\n}));\nexport default MBGoogleMap;","map":{"version":3,"sources":["/Users/mikemullin/Desktop/React/MeterBeaters/meterbeaters/src/Components/GoogleMap/MBGoogleMap.js"],"names":["React","withScriptjs","GoogleMap","Marker","withGoogleMap","Polyline","logo","icon","url","scaledSize","google","maps","Size","MBGoogleMap","props","zoom","lat","lng","polylines","map","polyline","index","strokeColor","strokeOpacity","strokeWeight","leadsGeoMarkers","geoMarkInfo","task_id","on"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,YADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,aAJF,QAKO,mBALP;AAMA,OAAOC,QAAP,MAAqB,2CAArB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AAEA;;AAEA,IAAMC,IAAI,GAAG;AACXC,EAAAA,GAAG,EAAEF,IADM;AAEXG,EAAAA,UAAU,EAAE,IAAIC,MAAM,CAACC,IAAP,CAAYC,IAAhB,CAAqB,EAArB,EAAyB,EAAzB;AAFD,CAAb;AAKA,IAAMC,WAAW,GAAGZ,YAAY,CAC9BG,aAAa,CAAC,UAAAU,KAAK;AAAA,SACjB,oBAAC,SAAD;AACE,IAAA,WAAW,EAAE,CADf;AAEE,IAAA,IAAI,EAAEA,KAAK,CAACC,IAFd;AAGE,IAAA,aAAa,EAAE;AAAEC,MAAAA,GAAG,EAAEF,KAAK,CAACE,GAAb;AAAkBC,MAAAA,GAAG,EAAEH,KAAK,CAACG;AAA7B,KAHjB;AAIE,IAAA,MAAM,EAAE;AAAED,MAAAA,GAAG,EAAEF,KAAK,CAACE,GAAb;AAAkBC,MAAAA,GAAG,EAAEH,KAAK,CAACG;AAA7B,KAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGH,KAAK,CAACI,SAAN,CAAgBC,GAAhB,CAAoB,UAACC,QAAD,EAAWC,KAAX;AAAA,WACnB,oBAAC,QAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,IAAI,EAAED,QAFR,CAGE;AAHF;AAIE,MAAA,OAAO,EAAE;AACPE,QAAAA,WAAW,EAAE,SADN;AAEPC,QAAAA,aAAa,EAAE,IAFR;AAGPC,QAAAA,YAAY,EAAE;AAHP,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADmB;AAAA,GAApB,CANH,EAmBGV,KAAK,CAACW,eAAN,CAAsBN,GAAtB,CAA0B,UAACO,WAAD,EAAcL,KAAd;AAAA,WACzB,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEK,WAAW,CAACC,OADnB;AAEE,MAAA,OAAO,EAAED,WAAW,CAACE,EAFvB;AAGE,MAAA,QAAQ,EAAE;AAAEZ,QAAAA,GAAG,EAAEU,WAAW,CAACV,GAAnB;AAAwBC,QAAAA,GAAG,EAAES,WAAW,CAACT;AAAzC,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADyB;AAAA,GAA1B,CAnBH,CADiB;AAAA,CAAN,CADiB,CAAhC;AAgCA,eAAeJ,WAAf","sourcesContent":["import * as React from \"react\";\nimport {\n  withScriptjs,\n  GoogleMap,\n  Marker,\n  withGoogleMap\n} from \"react-google-maps\";\nimport Polyline from \"react-google-maps/lib/components/Polyline\";\nimport logo from \"./MBLogo.png\";\n\n/*global google*/\n\nconst icon = {\n  url: logo,\n  scaledSize: new google.maps.Size(32, 32)\n};\n\nconst MBGoogleMap = withScriptjs(\n  withGoogleMap(props => (\n    <GoogleMap\n      defaultZoom={8}\n      zoom={props.zoom}\n      defaultCenter={{ lat: props.lat, lng: props.lng }}\n      center={{ lat: props.lat, lng: props.lng }}\n    >\n      {props.polylines.map((polyline, index) => (\n        <Polyline\n          key={index}\n          path={polyline}\n          //geodesic={true}\n          options={{\n            strokeColor: \"#008b45\",\n            strokeOpacity: 0.75,\n            strokeWeight: 3\n          }}\n        />\n      ))}\n\n      {props.leadsGeoMarkers.map((geoMarkInfo, index) => (\n        <Marker\n          key={geoMarkInfo.task_id}\n          onClick={geoMarkInfo.on}\n          position={{ lat: geoMarkInfo.lat, lng: geoMarkInfo.lng }}\n        />\n      ))}\n    </GoogleMap>\n  ))\n);\n\nexport default MBGoogleMap;\n"]},"metadata":{},"sourceType":"module"}